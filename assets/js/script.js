// **VARIABLES**

// arrays for each character type
let uppercase = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',];
let lowercase = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' ];
let special = ['!','@','#','$','%','&','~','-','_','+','=','<','>']
let numeric = ['1','2','3','4','5','6','7','8','9','0']

//"master" array that will contain all available characters for the password
let availCharArray = [];

// Get references to the #generate element (button)
let generateBtn = document.querySelector("#generate");

//functions to create password

function generatePassword () {
  //prompt the user for the password criteria  
  let length = prompt("How many characters for your desired password?");
 
  length = Math.round(length);

  //validate the input valdiate answer (password length between 8-128 char)
  if (isNaN(length)) {
    alert("Please submit a number to represent the length of your password.")
    return generatePassword();
  }
  else if (length < 8) {
    alert("The password must between 8 and 128 characters.");
    return null;
  } 
  else if (length > 128) {
  alert("The password must between 8 and 128 characters.")
  return null;
  }
  
  //prompt user for character types (yes/no via confirm())
  let includeUppercase = confirm("Would you like to include upper case characters in your password?")
  
  let includeLowercase = confirm("Would you like to include lower case characters in your password?")

  let includeNumeric = confirm("Would you like to include numeric characters in your password?")

  let includeSpecial = confirm("Would you like to include special characters in your password?")
 
  //validate the input - valdiate answers (must select at least one type of character)

  if (includeUppercase === false && includeLowercase === false && includeNumeric === false && includeSpecial === false) {
    alert("You must include at least one character type for your password to be generated.");
    return null;
  };

  //store user answers in this object (objec)
  userInput = {
    length: length,
    includeUppercase: includeUppercase,
    includeLowercase: includeLowercase,
    includeNumeric: includeNumeric, 
    includeSpecial: includeSpecial
  };

  //Arrays and variables needed to store password as it is generated by criteria noted above
  let reqPasswordArray = [];
  let remainPasswordArray = [];
  let numConfCharTypes = 0;

  //For each character type, determine if it was confirmed by user:
  if (includeUppercase) {
    //function that randomly pulls a character from the confirmed char type array
    let confirmedUppercaseChar = uppercase[Math.floor(Math.random()*uppercase.length)]
    //add this random char to the required portion of the password array
    reqPasswordArray.push(confirmedUppercaseChar);
    //the confirmed char type array is added to the main array to choose remaining char for password
    availCharArray = availCharArray.concat(uppercase);
    numConfCharTypes = numConfCharTypes + 1;
  }

  if (includeLowercase) {
    availCharArray=availCharArray.concat(lowercase);
    //function that randomly pulls a character from the confirmed char type array
    let confirmedLowercaseChar = lowercase[Math.floor(Math.random()*lowercase.length)]
    //add this random char to the required portion of the password array
    reqPasswordArray.push(confirmedLowercaseChar);
    //the confirmed char type array is added to the main array to choose remaining char for password
    availCharArray = availCharArray.concat(lowercase);
    numConfCharTypes = numConfCharTypes + 1;
  }

  if (includeNumeric) {
    availCharArray=availCharArray.concat(numeric);
    //function that randomly pulls a character from the confirmed char type array
    let confirmedNumericChar = numeric[Math.floor(Math.random()*numeric.length)]
    //add this random char to the required portion of the password array
    reqPasswordArray.push(confirmedNumericChar);
    //the confirmed char type array is added to the main array to choose remaining char for password
    availCharArray = availCharArray.concat(numeric);
    numConfCharTypes = numConfCharTypes + 1;
  }

  if (includeSpecial) {
    availCharArray=availCharArray.concat(special);
    //function that randomly pulls a character from the confirmed char type array
    let confirmedSpecialChar = special[Math.floor(Math.random()*special.length)]
    //add this random char to the required portion of the password array
    reqPasswordArray.push(confirmedSpecialChar);
    //the confirmed char type array is added to the main array to choose remaining char for password
    availCharArray = availCharArray.concat(special);
    numConfCharTypes = numConfCharTypes + 1;  
  }

  //Create a loop this as many times as the the userlength (minus the number of confirmed char types)
  for (let i =0; i < (userInput.length-numConfCharTypes); i++) {
      
    let randomChar = availCharArray[Math.floor(Math.random()*(availCharArray.length))];
        
    remainPasswordArray.push(randomChar);
  }
    
  remainPasswordString = remainPasswordArray.join("");
  reqPasswordString = reqPasswordArray.join("");

  let finalPass = reqPasswordString + remainPasswordString;
  
  return finalPass;
};

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  
  var passwordText = document.querySelector("#password");

  passwordText.value = password;
};

// Add event listener to generate button - when the button is clicked on the fxn launches
generateBtn.addEventListener("click", writePassword);



